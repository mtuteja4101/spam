# -*- coding: utf-8 -*-
"""spamorham.ipynb
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PWwPNU2BTtFzlMvwBYaYSk9ydc2_-vml
"""

#import pyngrok
#from flask_ngrok import run_with_ngrok
from flask import Flask, request, render_template, jsonify, request, url_for, session, flash
#from pyngrok import ngrok
import requests
import json
from flask_cors import CORS
#from bs4 import BeautifulSoup
#import threading
#from datetime import timedelta
#from flask_sqlalchemy import SQLAlchemy
import pickle
import re
import nltk
from nltk.corpus import stopwords

#nltk.download('stopwords')

#!pip install flask-ngrok

#!curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

#!pip install pyngrok
from werkzeug.utils import redirect
#ngrok.set_auth_token("29qrK5V1DxqT5QhX9qENej1Urzu_2qV94jkdCN8AshUmuCdkn")



app = Flask(__name__)
cors = CORS(app)

API_URL = "https://api-inference.huggingface.co/models/unitary/toxic-bert"
headers = {"Authorization": "Bearer {}".format('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')}

model = pickle.load(open('model.pkl','rb'))
cv= pickle.load(open('transform.pkl','rb'))


def query(payload):
	response = requests.post(API_URL, headers=headers, json=payload)
	return response.json()
	



#app.secret_key = "h"

#run_with_ngrok(app)

@app.route("/")
def index():
  return "<h1>toxic comment /testing/str ,  spam /spamorham/str</h1>"

@app.route("/testing/<comment>")


def betacomment(comment):
  output = query({
	"inputs": comment
  })
  
  return (jsonify(output))


@app.route("/spamornot/<post>")

def modelspam(post):

  #clean_post = []
  split_post = post.split(" ")
  if len (split_post) <3:
    return "scam"
	
  post_tr = post.lower()
  post_tr = re.sub('[^a-zA-Z]',' ',post_tr)

  post_tr = ' '.join(i for i in post_tr if i not in stopwords.words('english'))

  post_tr_cv = cv.transform([post]).toarray()
  prediction = model.predict(post_tr_cv)

  if prediction[0] == 1:
    ans_pred = "scam"

  else: 
    ans_pred = "good"
  return "{}".format(ans_pred)


if __name__ == "__main__":
  app.run()